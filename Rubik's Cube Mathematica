Manipulate[
(** ** DATA CONTROLLER  MAINLY SAMPLES THE VIEW OF THE MODEL DEFINED IN THE INITIALIZATION ** **)
(*As all the demonstrations it is just another Manipulate, although which variables it changes and how is not clear.*)


Graphics3D[
(** **DATA VIEW EFFORT THE INITIALIZATION OR MODEL WAS RENDERED HERE****)
(*The manipulate operates in a Graphics3D object. using a which statement*)


Which[
(*Which[Subscript[test, 1],Subscript[value, 1],Subscript[test, 2],Subscript[value, 2],\[Ellipsis]] evaluates each of the Subscript[test, i] in turn.returning the value of the Subscript Subscript[value, i] corresponding to the first one that yields True.*)


(*TEST #1 *)
m===n,(*Check if <m whatever that is identical to n whatever n is >*)
\[Alpha]=0;cube,
(*if m === n then sets \[Alpha] <whatever that is> to 0 and returns cube whatever cube is*)



(*TEST #2*)
\[Alpha]<1,(*Check is the test1 fails the check if <\[Alpha]> is less than 1*)
\[Alpha]+=1.0/frames;twisting[m,\[Alpha],cube],
(*If \[Alpha] is less than 1, take its value and add the Real[1.0] and divide this result into whatever quantity is frames and Then evaluate the twisting function on m, \[Alpha] and cube. *)



(*TEST #3*)
\[Alpha]>=1,
(*If TEST #2 failed then check if \[Alpha]<whatever that is>is equal or greater than 1*)
AppendTo[seq,m];cube=twist[m,cube];m=n;cube
(* If \[Alpha] <whatever that is> is greater than 1 then append the value m to seq <whatever that is>*)



],
(*OPTION #1 PLOT LABEL*)
PlotLabel->Row[If[m=!=n,Append[seq,Style[m,Red]],Prepend[seq,""]]],


(*OPTION #2 PLOT RANGE*)
PlotRange->2.1,

(*OPTION #3 SPEHRICAL REGION*)
SphericalRegion->True,


(*OPTION #4 BOXED*)
Boxed->False,BaseStyle->{12},


(*OPTION #5 LIGHT*)
Lighting->{{"Ambient",GrayLevel[0.9]},{"Point",GrayLevel[0.1],ImageScaled[{0.5,3,0.5}]}},


(*OPTION #6 IMAGE DISPLAY SIZE*)
ImageSize->{350,350}
],


(** ** START OF MANIPULATE PARAMETERS** **)

(*MANIPULATE PARAMETER #1 ANIMATION FRAMES*)
{{frames,12},1,24,1,Appearance->"Labeled"},

(*MANIPULATE PARAMETER #2 *)
{{cube,solved},ControlType->None},


(*MANIPULATE PARAMETER #3*)
{{m,n},ControlType->None},


(*MANIPULATE PARAMETER #4*)
{{seq,{}},ControlType->None},


(*MANIPULATE PARAMETER #5*)
{{\[Alpha],0},ControlType->None},



(* MANIPULATE PARAMETER #6 *)
Row[
{
Button["reset",cube=solved;m=n;seq={}],
Button["scramble",cube=Fold[twist[#2,#1]&,solved,RandomChoice[Join[basic,inv/@basic],25]];m=n;seq={}],
Button["undo",If[\[Alpha]>0,m=n,If[Length[seq]>0,cube=twist[inv[Last[seq]],cube];m=n;seq=Drop[seq,-1]]]]
},
Spacer[2]
],



(* MANIPULATE PARAMETER #7 *)
Row[
Button[Dynamic[mod[#]],If[\[Alpha]>0.5,AppendTo[seq,m];cube=twist[m,cube]];m=mod[#];\[Alpha]=0,Background->col[#],ImageSize->{30,30}]&/@basic,
Spacer[2]
](** ** END OF MANIPULATE PARAMETER SET OR VIEW ** **),



(** ** START OF MANIPULATE OPTIONS ** **)
(* MANIPULATE OPTION #1 *)
SynchronousUpdating->True,



(* MANIPULATE OPTION #2 *)
PerformanceGoal->"Quality",



(* 

MANIPULATE OPTION #3  INITIALIZATION DATA MODEL ALL THE EFFORT STARTED HERE.
In here you can find the function definitions that are being applied in the Manipulate itself.  I thought that this was better of declared before that Manipulate try to call them, but 
that is exactly what it happends. This is where the heavy lifting is done it is the model.

*)
Initialization:>(
(* Geometry operations are numbered in sequence *)



(** ** ** 1 ** ** **)
With[{eps=0.05},
ucoords={{-(1/2),-(1/2),-(1/2)},{-(1/2),-(1/2),1/2},{-(1/2),1/2,-(1/2)},{-(1/2),1/2,1/2},{1/2,-(1/2),-(1/2)},{1/2,-(1/2),1/2},{1/2,1/2,-(1/2)},{1/2,1/2,1/2}}*(1-eps);
];



(** ** ** 2 ** ****)
cindices={{8,4,2,6},{8,6,5,7},{8,7,3,4},{4,3,1,2},{1,3,7,5},{2,1,5,6}};



(** ** ** 3 ** ****)
cubelet[orig_,cols_List]:=GraphicsComplex[#+orig&/@ucoords,MapThread[{FaceForm[#1],Polygon[#2]}&,{cols,cindices}]];


(** ** ** 4 ** ** **)
basic={b,f,l,r,d,u};



(** ** ** 5 ** ** **)
bcolors={Red,Orange,Blue,Green,Yellow,White};



(** ** ** 6 ** ** **)
MapThread[(#1/:col[#1]=#2)&,{basic,bcolors}];


(** ** ** 7 ** ** **)
stickers={
(* back: {i,i,i,b,i,i} *)
{{{i,i,i,b,d,l},{i,i,i,b,i,l},{u,i,i,b,i,l}},
{{i,i,i,b,d,i},{i,i,i,b,i,i},{u,i,i,b,i,i}},
{{i,i,r,b,d,i},{i,i,r,b,i,i},{u,i,r,b,i,i}}},
(* middle, {i,i,i,i,i,i} *)
{{{i,i,i,i,d,l},{i,i,i,i,i,l},{u,i,i,i,i,l}},
{{i,i,i,i,d,i},{i,i,i,i,i,i},{u,i,i,i,i,i}},
{{i,i,r,i,d,i},{i,i,r,i,i,i},{u,i,r,i,i,i}}},
(* front, {i,f,i,i,i,i} *)
{{{i,f,i,i,d,l},{i,f,i,i,i,l},{u,f,i,i,i,l}},
{{i,f,i,i,d,i},{i,f,i,i,i,i},{u,f,i,i,i,i}},
{{i,f,r,i,d,i},{i,f,r,i,i,i},{u,f,r,i,i,i}}}
}/.(#->col[#]&/@basic)/.i->Black;


(** ** ** 8 ** ** **)
origins=Outer[List,{-1,0,1},{-1,0,1},{-1,0,1}];


(** ** ** 9 ** ** **)
solved=MapThread[cubelet,{origins,stickers},3];


(** ** ** 10 ** ** **)
solved[[2,2,2]]={};




(*Transforms*)
(** ** ** 11 ** ** **)
b/:perm[b]={{{1,1,1},{1,3,1},{1,3,3},{1,1,3}},
{{1,2,1},{1,3,2},{1,2,3},{1,1,2}},{{1,2,2}}};


(** ** ** 12 ** ** **)
f/:perm[f]=Reverse/@perm[b]/.{1,y_,z_}:>{3,y,z};


(** ** ** 13 ** ** **)
l/:perm[l]={{{1,1,1},{1,1,3},{3,1,3},{3,1,1}},
{{2,1,1},{1,1,2},{2,1,3},{3,1,2}},{{2,1,2}}};



(** ** ** 14 ** ** **)
r/:perm[r]=Reverse/@perm[l]/.{x_,1,z_}:>{x,3,z};



(** ** ** 15 ** ** **)
d/:perm[d]={{{1,1,1},{3,1,1},{3,3,1},{1,3,1}},
{{2,1,1},{3,2,1},{2,3,1},{1,2,1}},{{2,2,1}}};



(** ** ** 16 ** ** **)
u/:perm[u]=Reverse/@perm[d]/.{x_,y_,1}:>{x,y,3};


(** ** ** 17 ** ** **)
n/:perm[n]={};


(** ** ** 18 ** ** **)
b/:ax[b]={1,0,0};


(** ** ** 19 ** ** **)
f/:ax[f]=-ax[b];


(** ** ** 20 ** ** **)
l/:ax[l]={0,1,0};


(** ** ** 21 ** ** **)
r/:ax[r]=-ax[l];


(** ** ** 22 ** ** **)
d/:ax[d]={0,0,1};




(*

START OF THE SECOND INITIALIZATION STILL INSIDE MANIPULATE

*)
Initialization:>(

(*Geometry*)
(** ** ** 1 ** ** **)
With[{eps=0.05},
ucoords={{-(1/2),-(1/2),-(1/2)},{-(1/2),-(1/2),1/2},{-(1/2),1/2,-(1/2)},{-(1/2),1/2,1/2},{1/2,-(1/2),-(1/2)},{1/2,-(1/2),1/2},{1/2,1/2,-(1/2)},{1/2,1/2,1/2}}*(1-eps);
];


(** ** ** 2 ** ** **)
cindices={{8,4,2,6},{8,6,5,7},{8,7,3,4},{4,3,1,2},{1,3,7,5},{2,1,5,6}};



(** ** ** 3 ** ** **)
cubelet[orig_,cols_List]:=GraphicsComplex[#+orig&/@ucoords,MapThread[{FaceForm[#1],Polygon[#2]}&,{cols,cindices}]];


(** ** ** 4 ** ** **)
basic={b,f,l,r,d,u};


(** ** ** 7 ** ** **)
bcolors={Red,Orange,Blue,Green,Yellow,White};


(** ** ** 8 ** ** **)
MapThread[(#1/:col[#1]=#2)&,{basic,bcolors}];


(** ** ** 9 ** ** **)
stickers={
(* back: {i,i,i,b,i,i} *)
{{{i,i,i,b,d,l},{i,i,i,b,i,l},{u,i,i,b,i,l}},
{{i,i,i,b,d,i},{i,i,i,b,i,i},{u,i,i,b,i,i}},
{{i,i,r,b,d,i},{i,i,r,b,i,i},{u,i,r,b,i,i}}},
(* middle, {i,i,i,i,i,i} *)
{{{i,i,i,i,d,l},{i,i,i,i,i,l},{u,i,i,i,i,l}},
{{i,i,i,i,d,i},{i,i,i,i,i,i},{u,i,i,i,i,i}},
{{i,i,r,i,d,i},{i,i,r,i,i,i},{u,i,r,i,i,i}}},
(* front, {i,f,i,i,i,i} *)
{{{i,f,i,i,d,l},{i,f,i,i,i,l},{u,f,i,i,i,l}},
{{i,f,i,i,d,i},{i,f,i,i,i,i},{u,f,i,i,i,i}},
{{i,f,r,i,d,i},{i,f,r,i,i,i},{u,f,r,i,i,i}}}
}/.(#->col[#]&/@basic)/.i->Black;


(** ** ** 10 ** ** **)
origins=Outer[List,{-1,0,1},{-1,0,1},{-1,0,1}];


(** ** ** 11 ** ** **)
solved=MapThread[cubelet,{origins,stickers},3];


(** ** ** 12 ** ** **)
solved[[2,2,2]]={};




(*Transforms*)
(** ** ** 13 ** ** **)
b/:perm[b]={{{1,1,1},{1,3,1},{1,3,3},{1,1,3}},
{{1,2,1},{1,3,2},{1,2,3},{1,1,2}},{{1,2,2}}};


(** ** ** 14 ** ** **)
f/:perm[f]=Reverse/@perm[b]/.{1,y_,z_}:>{3,y,z};


(** ** ** 15 ** ** **)
l/:perm[l]={{{1,1,1},{1,1,3},{3,1,3},{3,1,1}},
{{2,1,1},{1,1,2},{2,1,3},{3,1,2}},{{2,1,2}}};


(** ** ** 16 ** ** **)
r/:perm[r]=Reverse/@perm[l]/.{x_,1,z_}:>{x,3,z};


(** ** ** 17 ** ** **)
d/:perm[d]={{{1,1,1},{3,1,1},{3,3,1},{1,3,1}},
{{2,1,1},{3,2,1},{2,3,1},{1,2,1}},{{2,2,1}}};


(** ** ** 18 ** ** **)
u/:perm[u]=Reverse/@perm[d]/.{x_,y_,1}:>{x,y,3};


(** ** ** 19 ** ** **)
n/:perm[n]={};


(** ** ** 20 ** ** **)
b/:ax[b]={1,0,0};


(** ** ** 21 ** ** **)
f/:ax[f]=-ax[b];


(** ** ** 22 ** ** **)
l/:ax[l]={0,1,0};


(** ** ** 23 ** ** **)
r/:ax[r]=-ax[l];

(** ** ** 24 ** ** **)
d/:ax[d]={0,0,1};

(** ** ** 25 ** ** **)
u/:ax[u]=-ax[d];

(** ** ** 26 ** ** **)
n/:ax[n]={1,0,0};

(** ** ** 27 ** ** **)
(#/:angle[#]=Pi/2)&/@{b,f,l,r,d,u};


(** ** ** 28 ** ** **)
n/:angle[n]=0;



(** ** ** 29 ** ** **)
rot[m_]:=RotationMatrix[angle[m],ax[m]];


(*for animation, angle runs from 0 1 always*)
(** ** ** 30 ** ** **)
rot[m_,\[Alpha]_]:=RotationMatrix[\[Alpha]*angle[m],ax[m]];




(*inverses and half turns*)
(** ** ** 31 ** ** **)
perm[inv[m_]]:=Reverse/@perm[m];



(** ** ** 32 ** ** **)
ax[inv[m_]]:=ax[m];



(** ** ** 33 ** ** **)
angle[inv[m_]]:=-angle[m];



(** ** ** 34 ** ** **)
sq[cycle_/;OddQ[Length[cycle]]]:=Join[Take[cycle,{1,-1,2}],Take[cycle,{2,-1,2}]];



(** ** ** 35 ** ** **)
sq[cycle_/;EvenQ[Length[cycle]]]:=Sequence@@{Take[cycle,{1,-1,2}],Take[cycle,{2,-1,2}]};



(** ** ** 36 ** ** **)
perm[half[m_]]:=sq/@perm[m];



(** ** ** 38 ** ** **)
ax[half[m_]]:=ax[m];



(** ** ** 39 ** ** **)
angle[half[m_]]:=2*angle[m];



(** ** ** 40 ** ** **)
inv[inv[m_]]:=m;



(** ** ** 41 ** ** **)
inv[half[m_]]:=half[m];



(** ** ** 42 ** ** **)
Format[inv[m_]]:=Overscript[m,"_"];



(** ** ** 43 ** ** **)
Format[half[m_]]:=Superscript[m,2];


(*rotations*)

(** ** ** 44 ** ** **)
apply[rot_,Graphic(** ** ** 41 ** ** **)sComplex[points_,stuff__]]:=
GraphicsComplex[rot.#&/@points,stuff];


(** ** ** 45 ** ** **)
permute[clist_,tensor_]:=Fold[ReplacePart[#1,Thread[#2->Extract[#1,RotateRight[#2]]]]&,tensor,clist];



(** ** ** 47 ** ** **)
permute[clist_,rot_,tensor_]:=Fold[ReplacePart[#1,Thread[#2->(apply[rot,#]&/@Extract[#1,RotateRight[#2]])]]&,tensor,clist];




(** ** ** 48 ** ** **)
twist[move_,cube_]:=permute[perm[move],rot[move],cube];



(*animation*)
(** ** ** 49 ** ** **)
turn[move_,\[Alpha]_,part_]:=apply[rot[move,\[Alpha]],#]&/@part;



(** ** ** 50 ** ** **)
With[{

(** ** ** 51 ** ** **)
allPositions=Round[Flatten[origins+2,2]]
},


(** ** ** 52 ** ** **)
twisting[m_,\[Alpha]_,cube_]:=
Module[{mp},


(** ** ** 53 ** ** **)
mp=Flatten[perm[m],1];


(** ** ** 54 ** ** **)
Join[Extract[cube,Complement[allPositions,mp]],turn[m,\[Alpha],Extract[cube,mp]]]
]
];




(*keyboard modifiers*)

(** ** ** 55 ** ** **)
mod[m_]:=Which[
CurrentValue["AltKey"]||CurrentValue["ControlKey"],
half[m],
CurrentValue["ShiftKey"],
inv[m],
True,
m]
)


(** ** ** 56 ** ** **)
u/:ax[u]=-ax[d];


(** ** ** 57 ** ** **)
n/:ax[n]={1,0,0};




(** ** ** 58 ** ** **)
(#/:angle[#]=Pi/2)&/@{b,f,l,r,d,u};



n/:angle[n]=0;



rot[m_]:=RotationMatrix[angle[m],ax[m]];(*
  RotationMatrix[\[Theta]] gives the 2D rotation matrix that rotates 2D vectors counterclockwise by \[Theta] radians.
RotationMatrix[\[Theta],w] gives the 3D rotation matrix for a counterclockwise rotation around the 3D vector w.
RotationMatrix[{u,v}] gives the matrix that rotates the vector u to the direction of the vector v in any dimension.
RotationMatrix[\[Theta],{u,v}] gives the matrix that rotates by \[Theta] radians in the hyperplane spanned by u and v.
*)



(*for animation, angle runs from 0 1 always*)
rot[m_,\[Alpha]_]:=RotationMatrix[\[Alpha]*angle[m],ax[m]];



(*inverses and half turns*)
perm[inv[m_]]:=Reverse/@perm[m];



ax[inv[m_]]:=ax[m];



angle[inv[m_]]:=-angle[m];



sq[cycle_/;OddQ[Length[cycle]]]:=Join[Take[cycle,{1,-1,2}],Take[cycle,{2,-1,2}]];



sq[cycle_/;EvenQ[Length[cycle]]]:=Sequence@@{Take[cycle,{1,-1,2}],Take[cycle,{2,-1,2}]};



perm[half[m_]]:=sq/@perm[m];



ax[half[m_]]:=ax[m];



angle[half[m_]]:=2*angle[m];



inv[inv[m_]]:=m;



inv[half[m_]]:=half[m];



Format[inv[m_]]:=Overscript[m,"_"];



Format[half[m_]]:=Superscript[m,2];



(*rotations*)
apply[rot_,GraphicsComplex[points_,stuff__]]:=
GraphicsComplex[rot.#&/@points,stuff];



permute[clist_,tensor_]:=Fold[ReplacePart[#1,Thread[#2->Extract[#1,RotateRight[#2]]]]&,tensor,clist];
(*

FoldList[f,x,{a,b,\[Ellipsis]}] gives {x,f[x,a],f[f[x,a],b],\[Ellipsis]}.
   Fold[f,x,list] gives the last element of FoldList[f,x,list].

RotateRight[expr,n] cycles the elements in expr n positions to the right. 
RotateRight[expr] cycles one position to the right. 
RotateRight[expr,{Subscript[n, 1],Subscript[n, 2],\[Ellipsis]}] cycles elements at successive levels Subscript[n, i] positions to the right. 

*)


permute[clist_,rot_,tensor_]:=Fold[ReplacePart[#1,Thread[#2->(apply[rot,#]&/@Extract[#1,RotateRight[#2]])]]&,tensor,clist];



twist[move_,cube_]:=permute[perm[move],rot[move],cube];


(*animation*)
turn[move_,\[Alpha]_,part_]:=apply[rot[move,\[Alpha]],#]&/@part;


With[
{
allPositions=Round[
Flatten[origins+2,2]]
},
    twisting[m_,\[Alpha]_,cube_]:=  Module[{mp},mp=Flatten[perm[m],1];

Join[Extract[cube,Complement[allPositions,mp]],turn[m,\[Alpha],Extract[cube,mp]]]
]
];


(*keyboard modifiers*)
mod[m_]:=Which[
CurrentValue["AltKey"]||CurrentValue["ControlKey"],half[m],
CurrentValue["ShiftKey"],inv[m],
True,m]
)
]

